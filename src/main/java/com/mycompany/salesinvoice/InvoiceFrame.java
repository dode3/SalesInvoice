/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.salesinvoice;

import com.mycompany.salesinvoice.Model.InvoiceHeader;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kholoud
 */
public class InvoiceFrame extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form InvoiceFrame
     */
    public InvoiceFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        CreateInvBtn = new javax.swing.JButton();
        CreateInvBtn.addActionListener(this);
        DeleteInvBtn = new javax.swing.JButton();
        DeleteInvBtn.addActionListener(this);
        jLabel1 = new javax.swing.JLabel();
        InvNumLbl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        InvDateTF = new javax.swing.JTextField();
        CustNameTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        InvTotalLbl = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        InvLinesTable = new javax.swing.JTable();
        saveLineBtn = new javax.swing.JButton();
        saveLineBtn.addActionListener(this);
        cancelLineBtn = new javax.swing.JButton();
        cancelLineBtn.addActionListener(this);
        jMenuBar1 = new javax.swing.JMenuBar();
        loadMenu = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        loadMenuItem.addActionListener(this);
        SaveMenuItem = new javax.swing.JMenuItem();
        SaveMenuItem.addActionListener(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No.", "Date", "Customer", "Total"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        CreateInvBtn.setText("Create new invoice");
        CreateInvBtn.setActionCommand("CreateNewInvoice");

        DeleteInvBtn.setText("Delete invoice");
        DeleteInvBtn.setActionCommand("DeleteInvoice");

        jLabel1.setText("Invoice number");

        jLabel3.setText("Invoice date");

        jLabel4.setText("Customer name");

        InvDateTF.setText("jTextField1");

        CustNameTF.setText("jTextField2");

        jLabel5.setText("Invoice total");

        jLabel7.setText("Invoice items");

        InvLinesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No.", "Item Name", "Item Price", "Count", "Item Total"
            }
        ));
        jScrollPane2.setViewportView(InvLinesTable);

        saveLineBtn.setText("Save");
        saveLineBtn.setActionCommand("SaveLine");

        cancelLineBtn.setText("Cancel");
        cancelLineBtn.setActionCommand("CancelLine");

        loadMenu.setText("File");

        loadMenuItem.setText("Load file");
        loadMenuItem.setActionCommand("LoadFile");
        loadMenuItem.setName(""); // NOI18N
        loadMenu.add(loadMenuItem);

        SaveMenuItem.setText("Save file");
        SaveMenuItem.setActionCommand("SaveFile");
        loadMenu.add(SaveMenuItem);

        jMenuBar1.add(loadMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(CreateInvBtn)
                        .addGap(119, 119, 119)
                        .addComponent(DeleteInvBtn)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InvDateTF)
                                    .addComponent(CustNameTF)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(InvTotalLbl)
                                            .addComponent(InvNumLbl))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(saveLineBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelLineBtn)
                        .addGap(108, 108, 108))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(InvNumLbl))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(InvDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(CustNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(InvTotalLbl))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateInvBtn)
                    .addComponent(DeleteInvBtn)
                    .addComponent(saveLineBtn)
                    .addComponent(cancelLineBtn))
                .addContainerGap(148, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvoiceFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateInvBtn;
    private javax.swing.JTextField CustNameTF;
    private javax.swing.JButton DeleteInvBtn;
    private javax.swing.JTextField InvDateTF;
    private javax.swing.JTable InvLinesTable;
    private javax.swing.JLabel InvNumLbl;
    private javax.swing.JLabel InvTotalLbl;
    private javax.swing.JMenuItem SaveMenuItem;
    private javax.swing.JButton cancelLineBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenu loadMenu;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JButton saveLineBtn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        String theAction = e.getActionCommand();
        switch (theAction) {
            case "CreateNewInvoice":
                if (checkInputFields()) { //opens connection and then write on the csv file
                } else {
                    JOptionPane.showMessageDialog(null, "one or more input fields are empty");
                }
                break;
            case "DeleteInvoice":
//to remove the row from the table
                DefaultTableModel model = (DefaultTableModel) InvLinesTable.getModel();
                try {
                    int tableIndex = InvLinesTable.getSelectedRow();
                    model.removeRow(tableIndex);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

// to remove it from csv file
                break;
            case "SaveLine":
                break;
            case "CancelLine":
                System.exit(0); //exit mn el barnameg without errors
                break;
            case "LoadFile":
                openFile(); //select and open the csv file
                break;
            case "SaveFile":
            try {
                saveContent();
            } catch (Exception ex) {
            }
            
            break;
            
        }
    }

    private void openFile() {
        JFileChooser fc = new JFileChooser();
        int result = fc.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String path = fc.getSelectedFile().getPath();
            //FileInputStream inputStream = null;
            BufferedReader br = null;
            try {
                br = new BufferedReader(new FileReader(path));
                //String firstLine = br.readLine().trim();
                //String[] columnName = firstLine.split(",");
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                //model.setColumnIdentifiers(columnName);
                Object[] tableLines = br.lines().toArray();
                for (int i = 0; i < tableLines.length; i++) {
                    String line = tableLines[i].toString().trim();
                    String[] dataLines = line.split(",");
                    model.addRow(dataLines);
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    br.close();
                } catch (IOException e) {
                }
            }
        }
    }
    
    private void saveContent() throws IOException {
//choose where to save
        JFileChooser fc = new JFileChooser();
        int result = fc.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String path = fc.getSelectedFile().getPath();
            FileOutputStream fos = null;
            try {
                fos = new FileOutputStream(path);
                byte[] b = InvDateTF.getText().getBytes();
                String theName = CustNameTF.getText();
                fos.write(b);
            } catch (Exception ex) {
                
            } finally {
                fos.close();
            }
            
        }
    }

    private static void insertContent() throws IOException {
        FileWriter fileWriter = null;
        BufferedWriter br = null;
        PrintWriter pw = null;
        try {
            String path = "InvoiceLine";
            fileWriter = new FileWriter(path, true);
            br = new BufferedWriter(fileWriter);
            pw = new PrintWriter(br);
        } catch (Exception ex) {
        } finally {
            pw.flush();
            pw.close();
        }


    }
    
    private Boolean checkInputFields() {
        if (InvDateTF.getText() == null || CustNameTF.getText() == null) {
            return false;
        } else {
            try {
                CustNameTF.getText();
                return true;
            } catch (Exception e) {
                return false;
            }
        }
    }
    
}
